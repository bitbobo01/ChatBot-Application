import datetime
from bson.objectid import ObjectId
import sys
import json
import os
import re
# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")
from chatgptModule import client
from database import db
categories_collection = db["categories"]
summaries_collection = db["summaries"]
# L·∫•y danh s√°ch category hi·ªán c√≥
def get_category_tree():
    """L·∫•y danh s√°ch category t·ª´ MongoDB"""
    categories = list(categories_collection.find({}, {"_id": 1, "name": 1}))
    return [{"id": str(cat["_id"]), "name": cat["name"]} for cat in categories]
def get_catergory_base_on_content(content):
    categories = get_category_tree()
    category_names = [cat["name"] for cat in categories]

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content":
                "B·∫°n l√† m·ªôt AI chuy√™n x·ª≠ l√Ω vƒÉn b·∫£n. "
                "H√£y ƒë·ªçc c√¢u h·ªèi v√† tr√≠ch xu·∫•t n·ªôi dung ƒë·ªÉ t√¨m danh m·ª•c ph√π h·ª£p. "
                "Ch·ªâ tr·∫£ v·ªÅ t√™n danh m·ª•c, c√°ch nhau b·∫±ng d·∫•u ph·∫©y n·∫øu c√≥ nhi·ªÅu. "
                "Danh m·ª•c hi·ªán c√≥: " + ", ".join(category_names) + ". "
            },
            {"role": "user", "content": f"H√£y ƒë·ªçc v√† ph√¢n lo·∫°i √Ω c·ªßa c√¢u h·ªèi:\n\n{content}"}
        ],
        max_tokens=200
    )

    # Tr√≠ch n·ªôi dung ph·∫£n h·ªìi
    raw_text = response.choices[0].message.content
    print("üîç GPT Response:", raw_text)

    # D√πng regex ƒë·ªÉ tr√≠ch c√°c t√™n danh m·ª•c (sau d·∫•u ':' ho·∫∑c l·∫•y h·∫øt n·∫øu kh√¥ng c√≥)
    match = re.search(r":\s*(.+)", raw_text)
    extracted = match.group(1) if match else raw_text

    # C·∫Øt th√†nh danh s√°ch, lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a
    matched_names = [name.strip().lower() for name in extracted.split(",")]

    # T√¨m t·∫•t c·∫£ category trong DB c√≥ t√™n tr√πng kh·ªõp (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    matched_categories = list(categories_collection.find({
        "$expr": {"$in": [{"$toLower": "$name"}, matched_names]}
    }))

    return matched_categories
# Th√™m category m·ªõi (n·∫øu ch∆∞a t·ªìn t·∫°i)
def add_category(name, parent_id=None):
    existing_category = categories_collection.find_one({"name": name})
    
    # N·∫øu category ƒë√£ t·ªìn t·∫°i, tr·∫£ v·ªÅ ID c≈©
    if existing_category:
        return str(existing_category["_id"])

    # X√°c ƒë·ªãnh xem c√≥ category cha kh√¥ng
    parent_id = None
    for parent in categories_collection.find():  # Duy·ªát to√†n b·ªô categories c√≥ s·∫µn
        if parent["name"] in name:  # N·∫øu t√™n category m·ªõi ch·ª©a t√™n c·ªßa category cha
            parent_id = parent["_id"]
            break  # T√¨m ƒë∆∞·ª£c cha th√¨ d·ª´ng l·∫°i

    # T·∫°o category m·ªõi
    category_data = {
        "name": name,
        "parent_id": parent_id  # G√°n parent_id ƒë√∫ng
    }
    
    result = categories_collection.insert_one(category_data)
    return str(result.inserted_id)

# L∆∞u b·∫£n t√≥m t·∫Øt v√†o MongoDB
def save_summary(summary, category_name):
    category = categories_collection.find_one({"name": category_name})
    if not category:
        category_id = add_category(category_name)  # N·∫øu category ch∆∞a c√≥, t·∫°o m·ªõi
    else:
        category_id = str(category["_id"])

    summary_data = {
        "category_id": ObjectId(category_id),
        "summary": summary,
        "created_at": datetime.datetime.utcnow()
    }
    summaries_collection.insert_one(summary_data)
    return summary_data

# def update_category_tree():
#     """
#     Duy·ªát l·∫°i to√†n b·ªô categories v√† c·∫≠p nh·∫≠t `parent_id` n·∫øu c·∫ßn.
#     """
#     categories = list(categories_collection.find())  # L·∫•y to√†n b·ªô danh m·ª•c
#     print("b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t")
#     for category in categories:
#         if category["parent_id"] is None:  # N·∫øu ch∆∞a c√≥ parent
#             for potential_parent in categories:
#                 if category["_id"] != potential_parent["_id"] and potential_parent["name"] in category["name"]:
#                     # N·∫øu t√™n cha n·∫±m trong t√™n category con th√¨ g√°n `parent_id`
#                     categories_collection.update_one(
#                         {"_id": category["_id"]},
#                         {"$set": {"parent_id": potential_parent["_id"]}}
#                     )
#                     print(f"‚úÖ C·∫≠p nh·∫≠t {category['name']} -> Parent: {potential_parent['name']}")
#                     break  # Ch·ªâ c·∫ßn t√¨m 1 cha ƒë√∫ng l√† ƒë·ªß

def classify_and_split_categories(categories):
    """G·ª≠i danh m·ª•c l√™n GPT ƒë·ªÉ ph√¢n lo·∫°i cha-con & t√°ch nh√°nh n·∫øu c·∫ßn"""
    content = json.dumps(categories, ensure_ascii=False, indent=2)

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": 
                "B·∫°n l√† m·ªôt AI chuy√™n s·∫Øp x·∫øp danh m·ª•c th√†nh c·∫•u tr√∫c c√¢y cha-con h·ª£p l√Ω. "
                "H√£y ph√¢n nh√≥m danh m·ª•c d·ª±a tr√™n √Ω nghƒ©a th·ª±c t·∫ø, n·∫øu m·ªôt danh m·ª•c c√≥ th·ªÉ l√† cha c·ªßa danh m·ª•c kh√°c, h√£y ƒë·∫∑t `parent_id` h·ª£p l√Ω. "
                "Kh√¥ng t·ª± ƒë·ªông nh√≥m danh m·ª•c v√†o m·ªôt nh√≥m c·ªë ƒë·ªãnh nh∆∞ 'Tr√°ch nhi·ªám', 'Quy·ªÅn', v.v. m√† ph·∫£i suy lu·∫≠n d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø c·ªßa t·ª´ng danh m·ª•c. "
                "N·∫øu m·ªôt danh m·ª•c c√≥ n·ªôi dung chung chung, n√≥ c√≥ th·ªÉ l√† danh m·ª•c cha c·ªßa c√°c danh m·ª•c c·ª• th·ªÉ h∆°n. "
                "N·∫øu kh√¥ng c√≥ quan h·ªá cha-con h·ª£p l√Ω, gi·ªØ `parent_id = null`. "
                "Tr·∫£ v·ªÅ JSON v·ªõi format:\n\n"
                "{ \"categories\": [ { \"id\": \"1\", \"name\": \"Category A\", \"parent_id\": \"2\" }, { \"id\": \"6\", \"name\": \"Category A.1\", \"parent_id\": \"1\" } ] }\n\n"
                "Quan tr·ªçng: \n"
                "- **H√£y x√°c ƒë·ªãnh danh m·ª•c n√†o c√≥ n·ªôi dung t·ªïng qu√°t h∆°n ƒë·ªÉ l√†m cha c·ªßa danh m·ª•c nh·ªè h∆°n.**\n"
                "- **N·∫øu hai danh m·ª•c c√≥ n·ªôi dung li√™n quan, h√£y nh√≥m ch√∫ng v√†o c√πng m·ªôt c√¢y cha-con h·ª£p l√Ω.**\n"
                "- **Kh√¥ng t·ª± ƒë·ªông g√°n m·ªôt nh√≥m c·ªë ƒë·ªãnh cho danh m·ª•c, h√£y ph√¢n t√≠ch d·ª±a tr√™n ng·ªØ nghƒ©a th·ª±c t·∫ø.**\n"
                "- N·∫øu m·ªôt danh m·ª•c c√≥ th·ªÉ t√°ch th√†nh c√°c nh√°nh con, h√£y chia nh·ªè nh∆∞ng kh√¥ng gi·ªØ l·∫°i danh m·ª•c g·ªëc.\n"
                "- N·∫øu danh m·ª•c kh√¥ng c√≥ quan h·ªá r√µ r√†ng v·ªõi danh m·ª•c kh√°c, gi·ªØ `parent_id = null`.\n"
                "- Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt nh∆∞ 'Quy ƒë·ªãnh v·ªÅ', 'Th√¥ng tin', 'Nh√¢n vi√™n' n·∫øu kh√¥ng c·∫ßn thi·∫øt.\n"
                "- **Kh√¥ng t·∫°o quan h·ªá cha-con m·ªôt c√°ch g∆∞·ª£ng √©p, ch·ªâ khi th·ª±c s·ª± h·ª£p l√Ω.**"
            },
            {"role": "user", "content": f"H√£y ph√¢n lo·∫°i danh m·ª•c sau th√†nh c√¢y cha-con h·ª£p l√Ω, ƒë·∫£m b·∫£o m·ªói danh m·ª•c c√≥ quan h·ªá logic v·ªõi danh m·ª•c kh√°c:\n\n{content}"}
        ],
        max_tokens=1000
    )

    try:
        gpt_output_str = response.choices[0].message.content.strip().lower()
        gpt_output_str = re.sub(r"```json\n(.*)\n```", r"\1", gpt_output_str, flags=re.DOTALL)
        
        return json.loads(gpt_output_str)  # Parse JSON tr·∫£ v·ªÅ
    except json.JSONDecodeError:
        print("‚ùå L·ªói parse JSON t·ª´ GPT:", gpt_output_str)
        return {"categories": []}  # Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu l·ªói

def update_category_parent_and_split():
    """G·ª≠i danh m·ª•c l√™n GPT ƒë·ªÉ c·∫≠p nh·∫≠t parent_id v√† lo·∫°i b·ªè danh m·ª•c t·ªïng qu√°t n·∫øu ƒë√£ chia nh·ªè"""
    categories = get_category_tree()
    structured_tree = classify_and_split_categories(categories)
    # Mapping t·ª´ ID d·∫°ng string sang ObjectId
    id_mapping = {cat["id"]: ObjectId() for cat in structured_tree["categories"]}

    for cat in structured_tree["categories"]:
        category_id = id_mapping[cat["id"]]
        parent_id = id_mapping.get(cat["parent_id"]) if cat["parent_id"] else None  # Chuy·ªÉn parent_id h·ª£p l·ªá

        # C·∫≠p nh·∫≠t parent_id v√†o MongoDB
        categories_collection.update_one(
            {"_id": category_id},
            {"$set": {"parent_id": parent_id, "name": cat["name"]}},
            upsert=True
        )
        print(f"‚úÖ C·∫≠p nh·∫≠t {cat['name']} -> Parent ID: {cat['parent_id']}")

    # X√≥a nh·ªØng danh m·ª•c g·ªëc b·ªã chia nh·ªè v√† kh√¥ng c√≤n t·ªìn t·∫°i
    category_ids = set(id_mapping.values())
    for original_category in categories_collection.find():
        if original_category["_id"] not in category_ids:
            categories_collection.delete_one({"_id": original_category["_id"]})
            print(f"‚ùå X√≥a danh m·ª•c t·ªïng qu√°t: {original_category['name']} (ƒê√£ b·ªã chia nh·ªè)")

    print("üéØ Ho√†n t·∫•t c·∫≠p nh·∫≠t c√¢y category!")

# Ch·∫°y c·∫≠p nh·∫≠t t·ª± ƒë·ªông b·∫±ng GPT v·ªõi kh·∫£ nƒÉng chia nh√°nh con
# update_category_parent_and_split()
